name: 'Release'

on:
  push:
    branches:
      - release

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            name: 'macOS ARM64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            name: 'macOS Intel'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          npm install

      - name: Install dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          npm install

      # macOS 证书设置
      - name: Install Apple certificates
        if: matrix.platform == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 创建临时密钥链
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain

          # 导入证书
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # 清理
          rm -fr *.p12

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: v__VERSION__
          releaseName: 'DeepRant v__VERSION__'
          releaseBody: |
            请查看附件下载对应系统的安装包：
            - Windows: .msi 安装包
            - macOS Intel: .dmg (x64) 安装包
            - macOS Apple Silicon: .dmg (arm64) 安装包
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          tauriScript: 'npm run tauri'
